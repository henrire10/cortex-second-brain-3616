import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Code, Copy, Eye, EyeOff, Trash2, RefreshCw, Download, Search, MessageSquare, Bot, AlertCircle, FileText } from 'lucide-react';
import { toast } from 'sonner';
import { Input } from '@/components/ui/input';

interface AILogEntry {
  id: string;
  timestamp: string;
  type: 'request' | 'response' | 'error' | 'parse_error';
  endpoint: string;
  data: any;
  status?: number;
  error?: string;
  logType?: string;
}

export const DevAILogs: React.FC = () => {
  const [logs, setLogs] = useState<AILogEntry[]>([]);
  const [expandedLog, setExpandedLog] = useState<string | null>(null);
  const [isCapturing, setIsCapturing] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredLogs, setFilteredLogs] = useState<AILogEntry[]>([]);

  // Fun√ß√£o para adicionar log de forma mais robusta
  const addLog = (logEntry: AILogEntry) => {
    console.log('üìù ADICIONANDO LOG:', logEntry.type, logEntry.endpoint);
    setLogs(prevLogs => {
      const newLogs = [logEntry, ...prevLogs.slice(0, 99)];
      console.log('üìä Total de logs:', newLogs.length);
      return newLogs;
    });
  };

  // Interceptar requisi√ß√µes e logs de forma mais robusta
  useEffect(() => {
    if (!isCapturing) return;

    console.log('üöÄ INICIANDO SISTEMA DE LOGS AVAN√áADO');

    const originalFetch = window.fetch;
    const originalConsoleLog = console.log;
    const originalConsoleError = console.error;

    // Monitorar todas as requisi√ß√µes fetch
    window.fetch = async (...args) => {
      const [url, options] = args;
      const urlString = typeof url === 'string' ? url : url.toString();
      
      console.log('üåê INTERCEPTANDO FETCH:', urlString);
      
      try {
        // Capturar requisi√ß√µes para gera√ß√£o de treino e OpenAI
        if (urlString.includes('generate-workout') || urlString.includes('openai.com')) {
          console.log('‚ö° REQUISI√á√ÉO RELEVANTE DETECTADA:', urlString);
          
          // Log da requisi√ß√£o
          let requestData = null;
          try {
            if (options?.body) {
              requestData = typeof options.body === 'string' ? JSON.parse(options.body) : options.body;
            }
          } catch (e) {
            requestData = options?.body;
          }

          const requestLog: AILogEntry = {
            id: crypto.randomUUID(),
            timestamp: new Date().toISOString(),
            type: 'request',
            endpoint: urlString,
            data: requestData
          };
          
          console.log('üì§ ADICIONANDO LOG DE REQUEST');
          addLog(requestLog);
          
          try {
            const response = await originalFetch(...args);
            const responseClone = response.clone();
            
            let responseData;
            try {
              const responseText = await responseClone.text();
              try {
                responseData = JSON.parse(responseText);
              } catch {
                responseData = { rawText: responseText };
              }
            } catch {
              responseData = { error: 'Erro ao ler resposta' };
            }
            
            // Log da resposta
            const responseLog: AILogEntry = {
              id: crypto.randomUUID(),
              timestamp: new Date().toISOString(),
              type: response.ok ? 'response' : 'error',
              endpoint: urlString,
              data: responseData,
              status: response.status
            };
            
            console.log('üì• ADICIONANDO LOG DE RESPONSE:', response.status);
            addLog(responseLog);
            
            return response;
          } catch (networkError) {
            console.error('‚ùå ERRO DE REDE:', networkError);
            
            const errorLog: AILogEntry = {
              id: crypto.randomUUID(),
              timestamp: new Date().toISOString(),
              type: 'error',
              endpoint: urlString,
              data: { error: networkError.message },
              error: networkError.message
            };
            
            addLog(errorLog);
            throw networkError;
          }
        } else {
          // Para outras requisi√ß√µes, apenas fazer o fetch normal
          return originalFetch(...args);
        }
      } catch (interceptError) {
        console.error('‚ùå ERRO NO INTERCEPTOR:', interceptError);
        return originalFetch(...args);
      }
    };

    // Interceptar console.log para capturar logs estruturados da edge function
    console.log = (...args: any[]) => {
      originalConsoleLog.apply(console, args);
      
      try {
        const message = args[0];
        if (typeof message === 'string') {
          // Capturar logs estruturados da edge function
          if (message.includes('_LOG:')) {
            const parts = message.split('_LOG:');
            const logType = parts[0].trim();
            const logDataStr = parts[1];
            
            try {
              const logData = JSON.parse(logDataStr);
              const newLog: AILogEntry = {
                ...logData,
                id: logData.id || crypto.randomUUID(),
                timestamp: logData.timestamp || new Date().toISOString(),
                logType: logType.toLowerCase()
              };
              
              console.log('üîÑ LOG ESTRUTURADO CAPTURADO:', newLog.type);
              addLog(newLog);
            } catch (parseError) {
              console.error('‚ùå Erro ao parsear log estruturado:', parseError);
            }
          }
          
          // Capturar logs espec√≠ficos da gera√ß√£o de treino
          if (message.includes('Generating workout') || 
              message.includes('Raw workout plan') || 
              message.includes('Error parsing')) {
            const contextLog: AILogEntry = {
              id: crypto.randomUUID(),
              timestamp: new Date().toISOString(),
              type: message.includes('Error') ? 'error' : 'response',
              endpoint: '/functions/v1/generate-workout',
              data: { message, context: 'workout_generation' }
            };
            
            addLog(contextLog);
          }
        }
      } catch (error) {
        // Ignorar erros de parsing
      }
    };

    // Interceptar console.error
    console.error = (...args: any[]) => {
      originalConsoleError.apply(console, args);
      
      try {
        const message = args[0];
        if (typeof message === 'string') {
          if (message.includes('_LOG:')) {
            const parts = message.split('_LOG:');
            const logType = parts[0].trim();
            const logDataStr = parts[1];
            
            try {
              const logData = JSON.parse(logDataStr);
              const newLog: AILogEntry = {
                ...logData,
                id: logData.id || crypto.randomUUID(),
                timestamp: logData.timestamp || new Date().toISOString(),
                logType: logType.toLowerCase()
              };
              
              addLog(newLog);
            } catch (parseError) {
              console.error('‚ùå Erro ao parsear log de erro:', parseError);
            }
          } else {
            // Log gen√©rico de erro
            const errorLog: AILogEntry = {
              id: crypto.randomUUID(),
              timestamp: new Date().toISOString(),
              type: 'error',
              endpoint: 'console',
              data: { error: message },
              error: message
            };
            
            addLog(errorLog);
          }
        }
      } catch (error) {
        // Ignorar erros de parsing
      }
    };

    console.log('‚úÖ SISTEMA DE LOGS CONFIGURADO E ATIVO');

    // Cleanup
    return () => {
      console.log = originalConsoleLog;
      console.error = originalConsoleError;
      window.fetch = originalFetch;
      console.log('üõë Sistema de logs desativado');
    };
  }, [isCapturing]);

  // Filtrar logs baseado no termo de busca
  useEffect(() => {
    if (!searchTerm) {
      setFilteredLogs(logs);
    } else {
      const filtered = logs.filter(log => 
        JSON.stringify(log).toLowerCase().includes(searchTerm.toLowerCase()) ||
        log.endpoint.toLowerCase().includes(searchTerm.toLowerCase()) ||
        log.type.toLowerCase().includes(searchTerm.toLowerCase())
      );
      setFilteredLogs(filtered);
    }
  }, [logs, searchTerm]);

  // Fun√ß√£o para simular alguns logs de exemplo com prompt completo
  const addExampleLogs = () => {
    const fullSystemPrompt = `Voc√™ √© um personal trainer expert especializado em criar treinos COMPLETOS para academia. SEMPRE gere EXATAMENTE 4 treinos com EXATAMENTE 8 exerc√≠cios cada. Responda APENAS JSON v√°lido sem formata√ß√£o markdown. Seja espec√≠fico e detalhado.

REGRAS OBRIGAT√ìRIAS:
1. Criar treinos 100% personalizados usando APENAS equipamentos de academia
2. Definir quantidade ideal de exerc√≠cios baseada no perfil: Iniciantes (4-6), Intermedi√°rios (5-8), Avan√ßados (6-10)
3. Para emagrecimento usar menos exerc√≠cios, para hipertrofia usar mais
4. SEMPRE explicar didaticamente o porqu√™ das escolhas
5. Responder APENAS com JSON v√°lido, sem formata√ß√£o markdown`;

    const fullUserPrompt = `Voc√™ √© um personal trainer expert. Crie um plano de treino semanal COMPLETO em JSON v√°lido.

**PAR√ÇMETROS OBRIGAT√ìRIOS:**
- Usu√°rio: Intermedi√°rio, Ganhar massa muscular
- Criar EXATAMENTE 4 treinos
- Cada treino DEVE ter EXATAMENTE 8 exerc√≠cios
- Todos os exerc√≠cios devem ser √∫nicos e espec√≠ficos para academia

**PERFIL COMPLETO DO USU√ÅRIO:**
- Idade: 25 anos
- G√™nero: masculino
- Peso: 59.9kg
- Altura: 160cm
- Objetivo Principal: Ganhar massa muscular
- N√≠vel de Experi√™ncia: Intermedi√°rio
- Dias de Treino por Semana: 4 dias
- Exerc√≠cios por Sess√£o: 8 exerc√≠cios

**ESTRUTURA JSON OBRIGAT√ìRIA (responder APENAS JSON):**
{
  "weekNumber": 1,
  "goal": "Ganhar massa muscular",
  "difficulty": "Intermedi√°rio",
  "weeklyFrequency": "4 dias por semana",
  "sessionDuration": "60-75 minutos por sess√£o",
  "estimatedCalories": "1500-2000 calorias totais semanais",
  "aiRecommendation": "Plano criado especificamente para Intermedi√°rio com objetivo de ganhar massa muscular, incluindo 8 exerc√≠cios por sess√£o durante 4 dias semanais",
  "workoutDays": [
    {
      "day": 1,
      "title": "Nome do Treino espec√≠fico",
      "focus": "Grupo muscular principal",
      "duration": "60-75 minutos",
      "intensity": "Baixa/M√©dia/Alta",
      "estimatedCalories": "350-450 calorias",
      "exercises": [
        {
          "name": "Nome do exerc√≠cio espec√≠fico para academia",
          "sets": 3,
          "reps": "8-12",
          "rest": "90s",
          "weight": "peso em kg (ex: 40-60kg)",
          "muscleGroup": "Grupo muscular espec√≠fico",
          "difficulty": "Intermedi√°rio",
          "instructions": "Instru√ß√µes detalhadas de execu√ß√£o - m√≠nimo 50 caracteres",
          "commonMistakes": "Erros comuns espec√≠ficos deste exerc√≠cio",
          "alternatives": "Exerc√≠cios alternativos v√°lidos",
          "videoKeywords": "palavras-chave para busca de v√≠deo",
          "tips": "Dicas importantes e espec√≠ficas"
        }
      ]
    }
  ],
  "weeklyTips": [
    "Dica espec√≠fica para Ganhar massa muscular",
    "Dica para n√≠vel Intermedi√°rio",
    "Dica sobre recupera√ß√£o e progress√£o"
  ]
}

**REGRAS CR√çTICAS:**
1. CRIAR todos os 4 treinos
2. CADA treino com 8 exerc√≠cios √∫nicos
3. Exerc√≠cios espec√≠ficos para academia com equipamentos
4. Pesos realistas em kg para cada exerc√≠cio
5. Instru√ß√µes detalhadas (m√≠n. 50 caracteres cada)
6. Responder APENAS JSON v√°lido, sem markdown

IMPORTANTE: Complete TODO o JSON com TODOS os treinos e exerc√≠cios!`;

    const exampleResponseData = {
      id: 'chatcmpl-example',
      object: 'chat.completion',
      created: Math.floor(Date.now() / 1000),
      model: 'gpt-4o',
      choices: [
        {
          index: 0,
          message: {
            role: 'assistant',
            content: `{
  "weekNumber": 1,
  "goal": "Ganhar massa muscular",
  "difficulty": "Intermedi√°rio",
  "weeklyFrequency": "4 dias por semana",
  "sessionDuration": "60-75 minutos por sess√£o",
  "estimatedCalories": "1500-2000 calorias totais semanais",
  "aiRecommendation": "Como voc√™ escolheu treinar 4 dias por semana e √© intermedi√°rio com objetivo de ganhar massa muscular, criei 8 exerc√≠cios por sess√£o. Essa frequ√™ncia permite um excelente equil√≠brio entre est√≠mulo muscular e recupera√ß√£o, maximizando a hipertrofia atrav√©s de um volume adequado de exerc√≠cios que trabalham todos os grupos musculares de forma eficiente.",
  "workoutDays": [
    {
      "day": 1,
      "title": "Peito e Tr√≠ceps",
      "focus": "Parte superior do corpo",
      "duration": "60-75 minutos",
      "intensity": "M√©dia",
      "estimatedCalories": "350-450 calorias",
      "exercises": [
        {
          "name": "Supino Reto com Barra",
          "sets": 4,
          "reps": "8-12",
          "rest": "90-120s",
          "weight": "60-80kg",
          "muscleGroup": "Peito",
          "difficulty": "Intermedi√°rio",
          "instructions": "Deite no banco com os p√©s firmes no ch√£o. Posicione a barra na altura do peito, des√ßa controladamente at√© quase tocar o peito e empurre explosivamente de volta √† posi√ß√£o inicial.",
          "commonMistakes": "N√£o rebater no peito, evitar arquear excessivamente as costas, n√£o travar completamente os cotovelos no topo",
          "alternatives": "Supino com halteres, Supino inclinado, Supino na m√°quina",
          "videoKeywords": "supino reto barra academia t√©cnica",
          "tips": "Mantenha os p√©s firmes no ch√£o e esc√°pulas retra√≠das durante todo o movimento"
        },
        {
          "name": "Crucifixo com Halteres",
          "sets": 3,
          "reps": "10-12",
          "rest": "60-90s",
          "weight": "20-30kg cada",
          "muscleGroup": "Peito",
          "difficulty": "Intermedi√°rio",
          "instructions": "Deite no banco, segure os halteres com bra√ßos ligeiramente flexionados, abra em arco at√© sentir alongamento no peito e retorne controladamente.",
          "commonMistakes": "Flexionar muito os cotovelos, descer muito r√°pido, usar peso excessivo",
          "alternatives": "Pec deck, Cross over, Crucifixo no cabo",
          "videoKeywords": "crucifixo halteres peito t√©cnica",
          "tips": "Foque no alongamento e contra√ß√£o do peito, n√£o nos bra√ßos"
        }
      ]
    }
  ],
  "weeklyTips": [
    "Foque em movimentos compostos para m√°ximo ganho de massa muscular",
    "Para intermedi√°rios, varie a intensidade entre treinos",
    "Descanse adequadamente entre s√©ries para manter a qualidade do treino"
  ]
}`
          },
          finish_reason: 'stop'
        }
      ],
      usage: {
        prompt_tokens: 1250,
        completion_tokens: 1850,
        total_tokens: 3100
      }
    };

    const exampleLogs: AILogEntry[] = [
      {
        id: 'demo-1',
        timestamp: new Date().toISOString(),
        type: 'request',
        endpoint: '/functions/v1/generate-workout',
        data: {
          userProfile: { age: 25, gender: 'masculino', height: 160, weight: 59.9 },
          fitnessGoal: 'Ganhar massa muscular',
          experienceLevel: 'experiencia_intermediario'
        }
      },
      {
        id: 'demo-openai-request',
        timestamp: new Date(Date.now() - 500).toISOString(),
        type: 'request',
        endpoint: 'https://api.openai.com/v1/chat/completions',
        data: {
          model: 'gpt-4o',
          messages: [
            { 
              role: 'system', 
              content: fullSystemPrompt
            },
            { 
              role: 'user', 
              content: fullUserPrompt
            }
          ],
          temperature: 0.1,
          max_tokens: 16000,
          top_p: 0.9,
          frequency_penalty: 0.1,
          presence_penalty: 0.1
        }
      },
      {
        id: 'demo-openai-response',
        timestamp: new Date(Date.now() - 1000).toISOString(),
        type: 'response',
        endpoint: 'https://api.openai.com/v1/chat/completions',
        data: exampleResponseData,
        status: 200
      },
      {
        id: 'demo-2',
        timestamp: new Date(Date.now() - 1500).toISOString(),
        type: 'response',
        endpoint: '/functions/v1/generate-workout',
        data: {
          success: true,
          workoutPlan: JSON.parse(exampleResponseData.choices[0].message.content)
        },
        status: 200
      }
    ];
    
    exampleLogs.forEach(log => addLog(log));
    toast.success('Logs de exemplo com prompts e respostas COMPLETAS adicionados!');
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    toast.success('Copiado para a √°rea de transfer√™ncia!');
  };

  const toggleExpanded = (logId: string) => {
    setExpandedLog(expandedLog === logId ? null : logId);
  };

  const clearLogs = () => {
    setLogs([]);
    setFilteredLogs([]);
    toast.success('Logs limpos!');
  };

  const exportLogs = () => {
    const dataStr = JSON.stringify(filteredLogs, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `ai-logs-${new Date().toISOString().split('T')[0]}.json`;
    link.click();
    URL.revokeObjectURL(url);
    toast.success('Logs exportados!');
  };

  const formatJson = (data: any) => {
    try {
      return JSON.stringify(data, null, 2);
    } catch (error) {
      return String(data);
    }
  };

  const getLogBadgeColor = (type: string) => {
    switch (type) {
      case 'request':
        return 'bg-blue-500 hover:bg-blue-600';
      case 'response':
        return 'bg-green-500 hover:bg-green-600';
      case 'error':
      case 'parse_error':
        return 'bg-red-500 hover:bg-red-600';
      default:
        return 'bg-gray-500 hover:bg-gray-600';
    }
  };

  const getEndpointName = (endpoint: string) => {
    if (endpoint.includes('openai.com')) return 'OpenAI API';
    if (endpoint.includes('generate-workout')) return 'Gerador de Treino';
    if (endpoint === 'console') return 'Console';
    return endpoint;
  };

  const getFilteredLogsByType = (type: string) => {
    if (type === 'all') return filteredLogs;
    return filteredLogs.filter(log => log.type === type);
  };

  // Extrair prompt COMPLETO da IA
  const extractFullAIPrompt = (log: AILogEntry) => {
    if (log.type === 'request' && log.endpoint.includes('openai.com') && log.data?.messages) {
      const systemMessage = log.data.messages.find((msg: any) => msg.role === 'system')?.content || '';
      const userMessage = log.data.messages.find((msg: any) => msg.role === 'user')?.content || '';
      
      return {
        systemPrompt: systemMessage,
        userPrompt: userMessage,
        fullConversation: log.data.messages,
        model: log.data.model,
        temperature: log.data.temperature,
        maxTokens: log.data.max_tokens
      };
    }
    return null;
  };

  // Extrair resposta COMPLETA da IA
  const extractFullAIResponse = (log: AILogEntry) => {
    if (log.type === 'response' && log.endpoint.includes('openai.com') && log.data?.choices) {
      return {
        fullContent: log.data.choices[0]?.message?.content || '',
        finishReason: log.data.choices[0]?.finish_reason,
        usage: log.data.usage,
        model: log.data.model,
        id: log.data.id,
        created: log.data.created
      };
    }
    return null;
  };

  // Extrair informa√ß√µes do treino
  const extractWorkoutInfo = (log: AILogEntry) => {
    if (log.type === 'response' && log.data?.workoutPlan?.workoutDays) {
      const workoutDays = log.data.workoutPlan.workoutDays;
      return {
        totalDays: workoutDays.length,
        goal: log.data.workoutPlan.goal,
        difficulty: log.data.workoutPlan.difficulty,
        exercisesPerDay: workoutDays.map((day: any, index: number) => ({
          day: index + 1,
          title: day.title,
          exerciseCount: day.exercises?.length || 0,
          exercises: day.exercises?.map((ex: any) => ex.name) || []
        }))
      };
    }
    return null;
  };

  return (
    <div className="space-y-4 p-4">
      <div className="text-center">
        <h2 className="text-xl font-bold text-gray-800">üîç Logs Completos - IA & Prompts</h2>
        <p className="text-sm text-gray-600">Prompts COMPLETOS ‚Üí Respostas COMPLETAS da IA ‚Üí Valida√ß√µes</p>
        {isCapturing && (
          <div className="mt-2 p-2 bg-green-50 border border-green-200 rounded-lg">
            <p className="text-xs text-green-700 font-medium flex items-center justify-center gap-2">
              <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
              Sistema ativo - Capturando TUDO sem limita√ß√µes
            </p>
          </div>
        )}
      </div>

      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div className="flex items-center gap-2 flex-wrap">
          <Badge variant="outline" className="text-sm">
            {filteredLogs.length} registros
          </Badge>
          <Badge 
            variant={isCapturing ? "default" : "secondary"} 
            className={`text-sm ${isCapturing ? 'bg-green-500' : ''}`}
          >
            {isCapturing ? 'üü¢ Capturando' : '‚è∏Ô∏è Pausado'}
          </Badge>
          {logs.length > 0 && (
            <Badge variant="outline" className="text-sm border-blue-500 text-blue-600">
              √öltimo: {new Date(logs[0]?.timestamp).toLocaleTimeString('pt-BR')}
            </Badge>
          )}
        </div>
        
        <div className="flex flex-col sm:flex-row gap-2 w-full sm:w-auto">
          <div className="relative">
            <Search className="w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            <Input
              placeholder="Buscar logs..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10 w-full sm:w-64"
            />
          </div>
          
          <div className="flex gap-2">
            <Button 
              variant="outline" 
              size="sm" 
              onClick={() => setIsCapturing(!isCapturing)}
            >
              {isCapturing ? '‚è∏Ô∏è Pausar' : '‚ñ∂Ô∏è Capturar'}
            </Button>
            
            {logs.length === 0 && (
              <Button 
                variant="outline" 
                size="sm" 
                onClick={addExampleLogs}
                className="border-purple-200 text-purple-600 hover:bg-purple-50"
              >
                <Code className="w-4 h-4 mr-2" />
                Demo
              </Button>
            )}
            
            <Button variant="outline" size="sm" onClick={exportLogs}>
              <Download className="w-4 h-4 mr-2" />
              Exportar
            </Button>
            <Button variant="outline" size="sm" onClick={() => window.location.reload()}>
              <RefreshCw className="w-4 h-4 mr-2" />
              Recarregar
            </Button>
            <Button variant="outline" size="sm" onClick={clearLogs}>
              <Trash2 className="w-4 h-4 mr-2" />
              Limpar
            </Button>
          </div>
        </div>
      </div>

      <Tabs defaultValue="prompts" className="w-full">
        <TabsList className="grid w-full grid-cols-6">
          <TabsTrigger value="prompts">üìù Prompts COMPLETOS</TabsTrigger>
          <TabsTrigger value="responses">ü§ñ Respostas COMPLETAS</TabsTrigger>
          <TabsTrigger value="all">Todos ({filteredLogs.length})</TabsTrigger>
          <TabsTrigger value="request">üì§ Requests ({getFilteredLogsByType('request').length})</TabsTrigger>
          <TabsTrigger value="response">üì• Responses ({getFilteredLogsByType('response').length})</TabsTrigger>
          <TabsTrigger value="error">üö® Erros ({getFilteredLogsByType('error').length + getFilteredLogsByType('parse_error').length})</TabsTrigger>
        </TabsList>

        {/* Nova aba espec√≠fica para prompts COMPLETOS */}
        <TabsContent value="prompts" className="space-y-3">
          <ScrollArea className="h-[700px]">
            {(() => {
              const promptLogs = filteredLogs.filter(log => 
                log.type === 'request' && log.endpoint.includes('openai.com')
              );

              return promptLogs.length === 0 ? (
                <Card>
                  <CardContent className="p-6 text-center">
                    <div className="space-y-4">
                      <div className="text-4xl">üìù</div>
                      <div>
                        <h3 className="text-lg font-semibold text-gray-700">Nenhum prompt capturado ainda</h3>
                        <p className="text-sm text-gray-500 mt-2">
                          Gere um treino para ver os prompts COMPLETOS enviados para a IA
                        </p>
                      </div>
                      
                      {logs.length === 0 && (
                        <div className="bg-purple-50 border border-purple-200 rounded-lg p-4 mt-4">
                          <div className="flex items-center gap-2 mb-2">
                            <FileText className="w-4 h-4 text-purple-600" />
                            <p className="text-sm text-purple-700 font-medium">
                              O que voc√™ ver√° aqui (SEM LIMITA√á√ïES):
                            </p>
                          </div>
                          <ul className="text-sm text-purple-700 text-left list-disc list-inside space-y-1">
                            <li>Prompt do sistema COMPLETO (todas as instru√ß√µes)</li>
                            <li>Prompt do usu√°rio COMPLETO (dados e regras espec√≠ficas)</li>
                            <li>Estrutura JSON COMPLETA exigida</li>
                            <li>Par√¢metros detalhados da requisi√ß√£o</li>
                          </ul>
                        </div>
                      )}

                      <Button 
                        variant="outline" 
                        onClick={addExampleLogs}
                        className="border-purple-200 text-purple-600 hover:bg-purple-50"
                      >
                        <Code className="w-4 h-4 mr-2" />
                        Ver Exemplo com Prompts Completos
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ) : (
                promptLogs.map((log, index) => {
                  const promptData = extractFullAIPrompt(log);
                  
                  if (!promptData) return null;
                  
                  return (
                    <Card key={log.id} className="mb-4 border-purple-200">
                      <CardHeader className="pb-3">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-2">
                            <FileText className="w-5 h-5 text-purple-500" />
                            <span className="font-semibold">Prompt COMPLETO #{index + 1}</span>
                            <Badge variant="outline" className="text-xs border-purple-500 text-purple-600">
                              {promptData.model}
                            </Badge>
                            <Badge variant="outline" className="text-xs">
                              {new Date(log.timestamp).toLocaleString('pt-BR')}
                            </Badge>
                          </div>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => toggleExpanded(`prompt-${log.id}`)}
                          >
                            {expandedLog === `prompt-${log.id}` ? (
                              <EyeOff className="w-4 h-4" />
                            ) : (
                              <Eye className="w-4 h-4" />
                            )}
                          </Button>
                        </div>
                      </CardHeader>
                      
                      <CardContent className="space-y-4">
                        {/* Preview COMPLETO do Prompt do Sistema */}
                        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                          <div className="flex items-center justify-between mb-2">
                            <div className="flex items-center gap-2">
                              <Bot className="w-4 h-4 text-blue-600" />
                              <span className="font-semibold text-blue-800">Prompt do Sistema COMPLETO:</span>
                            </div>
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => copyToClipboard(promptData.systemPrompt)}
                            >
                              <Copy className="w-3 h-3" />
                            </Button>
                          </div>
                          <div className="text-sm text-blue-700 bg-white p-3 rounded border max-h-40 overflow-y-auto">
                            <pre className="whitespace-pre-wrap font-mono text-xs">
                              {promptData.systemPrompt || 'N√£o definido'}
                            </pre>
                          </div>
                        </div>

                        {/* Preview COMPLETO do Prompt do Usu√°rio */}
                        <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                          <div className="flex items-center justify-between mb-2">
                            <div className="flex items-center gap-2">
                              <MessageSquare className="w-4 h-4 text-green-600" />
                              <span className="font-semibold text-green-800">Prompt Principal COMPLETO:</span>
                            </div>
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => copyToClipboard(promptData.userPrompt)}
                            >
                              <Copy className="w-3 h-3" />
                            </Button>
                          </div>
                          <div className="text-sm text-green-700 bg-white p-3 rounded border max-h-60 overflow-y-auto">
                            <pre className="whitespace-pre-wrap font-mono text-xs">
                              {promptData.userPrompt || 'N√£o definido'}
                            </pre>
                          </div>
                        </div>

                        {/* Par√¢metros da Requisi√ß√£o */}
                        <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
                          <h5 className="font-semibold text-purple-800 mb-2">‚öôÔ∏è Par√¢metros da Requisi√ß√£o:</h5>
                          <div className="grid grid-cols-2 md:grid-cols-4 gap-2 text-xs">
                            <div className="bg-white p-2 rounded border">
                              <strong>Modelo:</strong> {promptData.model}
                            </div>
                            <div className="bg-white p-2 rounded border">
                              <strong>Temperatura:</strong> {promptData.temperature}
                            </div>
                            <div className="bg-white p-2 rounded border">
                              <strong>Max Tokens:</strong> {promptData.maxTokens}
                            </div>
                            <div className="bg-white p-2 rounded border">
                              <strong>Mensagens:</strong> {promptData.fullConversation?.length || 0}
                            </div>
                          </div>
                        </div>

                        {/* Detalhes completos quando expandido */}
                        {expandedLog === `prompt-${log.id}` && (
                          <div className="space-y-4 border-t pt-4">
                            <div className="flex justify-between items-center">
                              <h4 className="font-semibold text-sm">üìã Conversa√ß√£o COMPLETA (JSON):</h4>
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => copyToClipboard(formatJson(promptData.fullConversation))}
                              >
                                <Copy className="w-4 h-4 mr-2" />
                                Copiar Tudo
                              </Button>
                            </div>
                            
                            <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
                              <pre className="text-xs font-mono overflow-x-auto whitespace-pre-wrap max-h-96 overflow-y-auto bg-white p-3 rounded border">
                                {formatJson(promptData.fullConversation)}
                              </pre>
                            </div>
                          </div>
                        )}
                      </CardContent>
                    </Card>
                  );
                })
              );
            })()}
          </ScrollArea>
        </TabsContent>

        {/* Nova aba para respostas COMPLETAS da IA */}
        <TabsContent value="responses" className="space-y-3">
          <ScrollArea className="h-[700px]">
            {(() => {
              const responseLogs = filteredLogs.filter(log => 
                log.type === 'response' && log.endpoint.includes('openai.com')
              );

              return responseLogs.length === 0 ? (
                <Card>
                  <CardContent className="p-6 text-center">
                    <div className="space-y-4">
                      <div className="text-4xl">ü§ñ</div>
                      <div>
                        <h3 className="text-lg font-semibold text-gray-700">Nenhuma resposta da IA capturada</h3>
                        <p className="text-sm text-gray-500 mt-2">
                          Gere um treino para ver as respostas COMPLETAS da IA
                        </p>
                      </div>

                      <Button 
                        variant="outline" 
                        onClick={addExampleLogs}
                        className="border-green-200 text-green-600 hover:bg-green-50"
                      >
                        <Bot className="w-4 h-4 mr-2" />
                        Ver Exemplo com Respostas Completas
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ) : (
                responseLogs.map((log, index) => {
                  const responseData = extractFullAIResponse(log);
                  
                  if (!responseData) return null;
                  
                  return (
                    <Card key={log.id} className="mb-4 border-green-200">
                      <CardHeader className="pb-3">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-2">
                            <Bot className="w-5 h-5 text-green-500" />
                            <span className="font-semibold">Resposta COMPLETA da IA #{index + 1}</span>
                            <Badge variant="outline" className="text-xs border-green-500 text-green-600">
                              {responseData.model}
                            </Badge>
                            <Badge variant="outline" className="text-xs">
                              {new Date(log.timestamp).toLocaleString('pt-BR')}
                            </Badge>
                          </div>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => toggleExpanded(`response-${log.id}`)}
                          >
                            {expandedLog === `response-${log.id}` ? (
                              <EyeOff className="w-4 h-4" />
                            ) : (
                              <Eye className="w-4 h-4" />
                            )}
                          </Button>
                        </div>
                      </CardHeader>
                      
                      <CardContent className="space-y-4">
                        {/* Preview da resposta */}
                        <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                          <div className="flex items-center justify-between mb-2">
                            <span className="font-semibold text-green-800">Conte√∫do COMPLETO da Resposta:</span>
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => copyToClipboard(responseData.fullContent)}
                            >
                              <Copy className="w-3 h-3" />
                            </Button>
                          </div>
                          <div className="text-sm text-green-700 bg-white p-3 rounded border max-h-60 overflow-y-auto">
                            <pre className="whitespace-pre-wrap font-mono text-xs">
                              {responseData.fullContent.length > 500 && expandedLog !== `response-${log.id}` ?
                                `${responseData.fullContent.substring(0, 500)}...\n\n[Clique no olho para ver TUDO]` :
                                responseData.fullContent
                              }
                            </pre>
                          </div>
                        </div>

                        {/* Informa√ß√µes de uso */}
                        {responseData.usage && (
                          <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
                            <h5 className="font-semibold text-sm text-purple-800 mb-2">üí∞ Uso de Tokens:</h5>
                            <div className="grid grid-cols-3 gap-2 text-xs">
                              <div className="bg-white p-2 rounded border">
                                <span className="text-purple-600">Prompt:</span>
                                <span className="ml-1 font-mono font-bold">{responseData.usage.prompt_tokens}</span>
                              </div>
                              <div className="bg-white p-2 rounded border">
                                <span className="text-purple-600">Resposta:</span>
                                <span className="ml-1 font-mono font-bold">{responseData.usage.completion_tokens}</span>
                              </div>
                              <div className="bg-white p-2 rounded border">
                                <span className="text-purple-600">Total:</span>
                                <span className="ml-1 font-mono font-bold">{responseData.usage.total_tokens}</span>
                              </div>
                            </div>
                          </div>
                        )}

                        {/* Detalhes t√©cnicos */}
                        <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
                          <h5 className="font-semibold text-sm text-gray-800 mb-2">üîß Detalhes T√©cnicos:</h5>
                          <div className="grid grid-cols-2 gap-2 text-xs">
                            <div className="bg-white p-2 rounded border">
                              <strong>ID:</strong> {responseData.id}
                            </div>
                            <div className="bg-white p-2 rounded border">
                              <strong>Finish Reason:</strong> {responseData.finishReason}
                            </div>
                            <div className="bg-white p-2 rounded border">
                              <strong>Created:</strong> {new Date(responseData.created * 1000).toLocaleString()}
                            </div>
                            <div className="bg-white p-2 rounded border">
                              <strong>Tamanho:</strong> {responseData.fullContent.length} chars
                            </div>
                          </div>
                        </div>

                        {/* Resposta completa quando expandido */}
                        {expandedLog === `response-${log.id}` && (
                          <div className="space-y-4 border-t pt-4">
                            <div className="flex justify-between items-center">
                              <h4 className="font-semibold text-sm">üìÑ Resposta RAW COMPLETA:</h4>
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => copyToClipboard(formatJson(log.data))}
                              >
                                <Copy className="w-4 h-4 mr-2" />
                                Copiar RAW
                              </Button>
                            </div>
                            
                            <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
                              <pre className="text-xs font-mono overflow-x-auto whitespace-pre-wrap max-h-96 overflow-y-auto bg-white p-3 rounded border">
                                {formatJson(log.data)}
                              </pre>
                            </div>
                          </div>
                        )}
                      </CardContent>
                    </Card>
                  );
                })
              );
            })()}
          </ScrollArea>
        </TabsContent>

        {/* Outras abas existentes mantidas */}
        {['all', 'request', 'response', 'error'].map((tabValue) => (
          <TabsContent key={tabValue} value={tabValue} className="space-y-3">
            <ScrollArea className="h-[600px]">
              {(() => {
                let logsToShow = getFilteredLogsByType(tabValue === 'all' ? 'all' : tabValue);
                
                if (tabValue === 'error') {
                  logsToShow = filteredLogs.filter(log => log.type === 'error' || log.type === 'parse_error');
                }
                
                return logsToShow.length === 0 ? (
                  <Card>
                    <CardContent className="p-6 text-center">
                      <div className="space-y-4">
                        <div className="text-4xl">
                          {tabValue === 'error' ? '‚úÖ' : 'üìã'}
                        </div>
                        <div>
                          <h3 className="text-lg font-semibold text-gray-700">
                            {tabValue === 'error' ? 'Nenhum erro registrado' : 'Nenhum log encontrado'}
                          </h3>
                          {searchTerm && (
                            <p className="text-sm text-gray-500 mt-2">
                              Busca por: "{searchTerm}"
                            </p>
                          )}
                          {isCapturing && !searchTerm && (
                            <p className="text-sm text-blue-600 mt-2 font-medium">
                              üì° Sistema ativo - Gere um treino para ver os logs
                            </p>
                          )}
                        </div>
                        
                        {logs.length === 0 && tabValue === 'all' && (
                          <div className="bg-amber-50 border border-amber-200 rounded-lg p-4 mt-4">
                            <div className="flex items-center gap-2 mb-2">
                              <AlertCircle className="w-4 h-4 text-amber-600" />
                              <p className="text-sm text-amber-700 font-medium">
                                Nenhum log capturado ainda
                              </p>
                            </div>
                            <p className="text-sm text-amber-700">
                              Clique em "Demo" para adicionar logs de exemplo, ou gere um treino para ver logs reais.
                            </p>
                          </div>
                        )}
                      </div>
                    </CardContent>
                  </Card>
                ) : (
                  logsToShow.map((log) => {
                    const workoutInfo = extractWorkoutInfo(log);
                    
                    return (
                      <Card key={log.id} className="mb-3">
                        <CardHeader className="pb-2">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-2 flex-wrap">
                              <Badge className={`${getLogBadgeColor(log.type)} text-white`}>
                                {log.type.toUpperCase()}
                              </Badge>
                              
                              <Badge variant="outline" className="text-xs">
                                {getEndpointName(log.endpoint)}
                              </Badge>
                              
                              {log.status && (
                                <Badge 
                                  variant="outline" 
                                  className={`text-xs ${log.status >= 400 ? 'border-red-500 text-red-600' : 'border-green-500 text-green-600'}`}
                                >
                                  {log.status}
                                </Badge>
                              )}
                              
                              {workoutInfo && (
                                <Badge variant="outline" className="text-xs border-purple-500 text-purple-600">
                                  {workoutInfo.totalDays} dias ‚Ä¢ {workoutInfo.exercisesPerDay.reduce((total, day) => total + day.exerciseCount, 0)} exerc√≠cios
                                </Badge>
                              )}
                            </div>
                            
                            <div className="flex items-center gap-2">
                              <span className="text-xs text-gray-500">
                                {new Date(log.timestamp).toLocaleString('pt-BR')}
                              </span>
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => toggleExpanded(log.id)}
                              >
                                {expandedLog === log.id ? (
                                  <EyeOff className="w-4 h-4" />
                                ) : (
                                  <Eye className="w-4 h-4" />
                                )}
                              </Button>
                            </div>
                          </div>
                          
                          <div className="text-sm text-gray-600 font-mono truncate">
                            {log.endpoint}
                          </div>
                          
                          {log.error && (
                            <div className="text-sm text-red-600 font-medium bg-red-100 p-2 rounded mt-2">
                              üö® {log.error}
                            </div>
                          )}
                        </CardHeader>
                        
                        {/* Preview para treinos gerados */}
                        {workoutInfo && (
                          <CardContent className="pt-0 pb-2">
                            <div className="bg-purple-50 border border-purple-200 rounded-lg p-3">
                              <h5 className="font-semibold text-sm text-purple-800 mb-2">
                                üèãÔ∏è Treino: {workoutInfo.goal} - {workoutInfo.difficulty}
                              </h5>
                              <div className="grid grid-cols-1 gap-2 text-xs">
                                {workoutInfo.exercisesPerDay.map((day) => (
                                  <div key={day.day} className="bg-white p-2 rounded border">
                                    <div className="font-medium text-purple-700">
                                      Dia {day.day}: {day.title} ({day.exerciseCount} exerc√≠cios)
                                    </div>
                                    <div className="text-purple-600 mt-1">
                                      {day.exercises.slice(0, 3).join(', ')}
                                      {day.exercises.length > 3 && ` + ${day.exercises.length - 3} outros...`}
                                    </div>
                                  </div>
                                ))}
                              </div>
                            </div>
                          </CardContent>
                        )}
                        
                        {expandedLog === log.id && (
                          <CardContent>
                            <div className="space-y-3">
                              <div className="flex justify-between items-center">
                                <h4 className="font-semibold text-sm">Dados Completos:</h4>
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => copyToClipboard(formatJson(log.data))}
                                >
                                  <Copy className="w-4 h-4 mr-2" />
                                  Copiar
                                </Button>
                              </div>
                              
                              <div className={`p-4 rounded-lg border-2 ${
                                log.type === 'error' || log.type === 'parse_error' ? 'bg-red-50 border-red-200' : 
                                log.type === 'request' ? 'bg-blue-50 border-blue-200' :
                                'bg-green-50 border-green-200'
                              }`}>
                                <pre className="text-xs font-mono overflow-x-auto whitespace-pre-wrap max-h-96 overflow-y-auto">
                                  {formatJson(log.data)}
                                </pre>
                              </div>
                            </div>
                          </CardContent>
                        )}
                      </Card>
                    );
                  })
                );
              })()}
            </ScrollArea>
          </TabsContent>
        ))}
      </Tabs>
      
      {/* Status do sistema */}
      <div className="text-center mt-4">
        <p className="text-xs text-gray-500">
          {isCapturing ? 
            'üü¢ Monitoramento COMPLETO ativo - Capturando prompts e respostas SEM limita√ß√µes' : 
            '‚è∏Ô∏è Monitoramento pausado - Clique em "Capturar" para reativar'
          }
        </p>
      </div>
    </div>
  );
};
